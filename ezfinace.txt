pragma solidity ^0.5.0;
contract Bank {
    mapping (address => uint256) private balances;
    address[] accounts;
    uint256 rate = 3;
    address public owner;

    constructor() public {
        owner = msg.sender;
    }
function deposit() public payable returns (uint256){
if (0 == balances[msg.sender]){
accounts.push(msg.sender);
}
balances[msg.sender] = balances[msg.sender] + msg.value;
return balances[msg.sender];
}
function withdraw(uint amount) public returns (uint256){
require(balances[msg.sender] >=
amount, "Balance is not enough");
balances[msg.sender] -= amount;
msg.sender.transfer(amount);
return balances[msg.sender];
}

function userBalance() public view returns (uint256){
return balances[msg.sender];
}
function systemBalance()public view returns (uint256){
return address(this).balance;
}
[13:13]
function calculateInterest(address user, uint256 _rate) private view returns(uint256){
    uint256 interest = balances[user] *_rate / 100;
    return interest;

}

function totalInterestPerYear() external view returns(uint256){
uint256 total = 0;
for(uint256 i = 0; i < accounts.length; i++){
    address account = accounts[i];
    uint256 interest = calculateInterest(account, rate);
    total += interest;
}
return total;
}

function  systemDeposit() public payable returns (uint256){
require(owner == msg.sender, "You are not authorize");
return systemBalance();
}

function systemWithdraw(uint amount) public returns (uint256){
require(owner == msg.sender, "Your are not authorized");
require(systemBalance() >= amount, "System balance is not enough");
msg.sender.transfer(amount);
return systemBalance();
}
function payDividendsPerYear() payable public {
require(owner == msg.sender,
"You are not authorized");
uint256 totalInterest = 0;
    for (uint256 i = 0; i < accounts.length ; i++){
        address account = accounts[i];
        uint256 interest = calculateInterest(account, rate);
        balances[account] += interest;
        totalInterest +=interest;
require(msg.value == totalInterest,"Not enough interest to pay!!");
}
}}